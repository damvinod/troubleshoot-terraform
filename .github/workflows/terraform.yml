name: 'Terraform'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4

      - name: Terraform Format
        run: terraform fmt -check

      - name: Install dependencies and package Lambda function
        run: pip install -r lambda/requirements.txt -t lambda

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@b47578312673ae6fa5b5096b330d9fbac3d116df # v4.2.1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-east-1

      - name: Configure Terraform plugin cache
        run: mkdir -p ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ runner.arch }}-${{ env.stack }}-${{ hashFiles(join(env.stack, '/.terraform.lock.hcl')) }}
          restore-keys: terraform-${{ runner.os }}-${{ runner.arch }}-${{ env.stack }}-

      - name: Terraform Init
        run: TF_PLUGIN_CACHE_DIR="${HOME}/.terraform.d/plugin-cache" terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        if: steps.validate.outcome == 'success'
        run: terraform plan -detailed-exitcode -input=false -out plan.json -lock-timeout=60s -var "github_pat=${{ secrets.PAT_FOR_GITHUB_REPO }}"
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.plan.outcome == 'success' && steps.validate.outcome == 'success'
        run: terraform apply -auto-approve plan.json
        continue-on-error: true

      - name: Invoke troubleshoot-terraform Lambda function on failure
        if: steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure' || steps.apply.outcome == 'failure'
        run: |
          aws lambda invoke \
            --function-name terraform-troubleshoot-lambda \
            --region us-east-1 \
            --cli-binary-format raw-in-base64-out \
            --invocation-type Event \
            --payload '{
              "repo_name": "${{ github.repository }}",
              "logs_url": "${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/logs",
              "branch_name": "${{ github.ref_name }}"
            }' \
            /dev/null

      - name: Checking Job status
        if: steps.validate.outcome == 'failure' || steps.plan.outcome == 'failure' || steps.apply.outcome == 'failure'
        run: exit 1