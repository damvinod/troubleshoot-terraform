name: 'Terraform'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    outputs:
      init_outcome: ${{ steps.init.outcome }}
      validate_outcome: ${{ steps.validate.outcome }}
      plan_outcome: ${{ steps.plan.outcome }}
      apply_outcome: ${{ steps.apply.outcome }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.11.4

      - name: Install dependencies and package Lambda function
        run: pip install -r lambda/requirements.txt -t lambda_layer_build/python/

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-east-1

      - name: Configure Terraform plugin cache
        run: mkdir -p ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-${{ runner.os }}-${{ runner.arch }}-${{ env.stack }}-${{ hashFiles(join(env.stack, '/.terraform.lock.hcl')) }}
          restore-keys: terraform-${{ runner.os }}-${{ runner.arch }}-${{ env.stack }}-

      - name: Terraform Init
        id: init
        run: TF_PLUGIN_CACHE_DIR="${HOME}/.terraform.d/plugin-cache" terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -detailed-exitcode -input=false -out plan.json -lock-timeout=60s -var "github_pat=${{ secrets.PAT_FOR_GITHUB_REPO }}"

      - name: Terraform Apply
        id: apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve plan.json

  invoke-troubleshoot-terraform:
    name: 'Invoke Troubleshoot Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    needs: terraform
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && failure() && (
      needs.terraform.outputs.init_outcome == 'failure' ||
      needs.terraform.outputs.validate_outcome == 'failure' ||
      needs.terraform.outputs.plan_outcome == 'failure' ||
      needs.terraform.outputs.apply_outcome == 'failure'
      )}}
    steps:
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          aws-region: us-east-1

      - name: Invoke troubleshoot-terraform Lambda function on failure
        run: |
          echo "Checking for failed jobs in run ${{ github.run_id }}"

          failed_job_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            ${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs \
            | jq -r '.jobs[] | select(.conclusion=="failure") | .id' | head -n1)

          echo "First failed job ID: $failed_job_id"
          
          aws lambda invoke \
            --function-name terraform-troubleshoot-lambda \
            --region us-east-1 \
            --cli-binary-format raw-in-base64-out \
            --invocation-type RequestResponse \
            --payload "{
              \"repo_name\": \"${{ github.repository }}\",
              \"logs_url\": \"${{ github.api_url }}/repos/${{ github.repository }}/actions/jobs/${failed_job_id}/logs\",
              \"branch_name\": \"${{ github.ref_name }}\"
            }" \
            /dev/null